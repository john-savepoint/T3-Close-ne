import { defineSchema, defineTable } from "convex/server";
import { authTables } from "@convex-dev/auth/server";
import { v } from "convex/values";

const schema = defineSchema({
  // Include auth tables from @convex-dev/auth
  ...authTables,
  
  // Existing projects table (extended with auth)
  projects: defineTable({
    name: v.string(),
    systemPrompt: v.optional(v.string()),
    parentProjectId: v.optional(v.id("projects")),
    userId: v.id("users"),
    createdAt: v.number(),
    updatedAt: v.number(),
  })
    .index("by_user", ["userId"])
    .index("by_parent", ["parentProjectId"]),

  // Existing project attachments table
  projectAttachments: defineTable({
    projectId: v.id("projects"),
    attachmentId: v.id("attachments"),
    name: v.string(),
    type: v.string(),
    size: v.number(),
    content: v.optional(v.string()),
  })
    .index("by_project", ["projectId"])
    .index("by_attachment", ["attachmentId"]),

  // Existing chats table (enhanced with auth integration)
  chats: defineTable({
    title: v.string(),
    userId: v.id("users"),
    projectId: v.optional(v.id("projects")),
    activeLeafMessageId: v.optional(v.string()),
    status: v.union(v.literal("active"), v.literal("archived"), v.literal("trashed")),
    statusChangedAt: v.number(),
    createdAt: v.number(),
    updatedAt: v.number(),
  })
    .index("by_user", ["userId"])
    .index("by_project", ["projectId"])
    .index("by_status", ["status"])
    .index("by_user_status", ["userId", "status"]),

  // Existing messages table
  messages: defineTable({
    chatId: v.id("chats"),
    type: v.union(v.literal("user"), v.literal("assistant")),
    content: v.string(),
    timestamp: v.number(),
    model: v.optional(v.string()),
    parentMessageId: v.optional(v.string()),
    isEdited: v.optional(v.boolean()),
    editedAt: v.optional(v.number()),
  })
    .index("by_chat", ["chatId"])
    .index("by_parent", ["parentMessageId"])
    .index("by_chat_parent", ["chatId", "parentMessageId"]),

  // Existing attachments table (enhanced with auth)
  attachments: defineTable({
    name: v.string(),
    type: v.string(),
    size: v.number(),
    storageId: v.optional(v.id("_storage")),
    content: v.optional(v.string()),
    userId: v.id("users"),
    createdAt: v.number(),
  })
    .index("by_user", ["userId"])
    .index("by_type", ["type"]),

  // Existing user memories table (renamed from memories)
  userMemories: defineTable({
    userId: v.id("users"),
    projectId: v.optional(v.id("projects")),
    content: v.string(),
    isAutoGenerated: v.boolean(),
    category: v.optional(v.union(
      v.literal("preference"),
      v.literal("fact"),
      v.literal("instruction"),
      v.literal("style")
    )),
    createdAt: v.number(),
    updatedAt: v.number(),
  })
    .index("by_user", ["userId"])
    .index("by_project", ["projectId"])
    .index("by_user_project", ["userId", "projectId"])
    .index("by_category", ["category"]),

  // Existing memory suggestions table
  memorySuggestions: defineTable({
    userId: v.id("users"),
    content: v.string(),
    confidence: v.number(),
    context: v.string(),
    dismissed: v.boolean(),
    createdAt: v.number(),
  })
    .index("by_user", ["userId"])
    .index("by_dismissed", ["dismissed"]),

  // Existing RAG results table
  ragResults: defineTable({
    content: v.string(),
    chatId: v.id("chats"),
    timestamp: v.number(),
    relevanceScore: v.number(),
    snippet: v.string(),
  })
    .index("by_chat", ["chatId"])
    .index("by_relevance", ["relevanceScore"]),

  // Existing share links table
  shareLinks: defineTable({
    chatId: v.id("chats"),
    token: v.string(),
    isPublic: v.boolean(),
    expiresAt: v.optional(v.number()),
    createdBy: v.id("users"),
    createdAt: v.number(),
  })
    .index("by_token", ["token"])
    .index("by_chat", ["chatId"])
    .index("by_user", ["createdBy"]),

  // Existing temporary chats table
  temporaryChats: defineTable({
    sessionId: v.string(),
    title: v.string(),
    messages: v.array(v.object({
      id: v.string(),
      type: v.union(v.literal("user"), v.literal("assistant")),
      content: v.string(),
      timestamp: v.number(),
      model: v.optional(v.string()),
      parentMessageId: v.optional(v.string()),
      isEdited: v.optional(v.boolean()),
      editedAt: v.optional(v.number()),
    })),
    createdAt: v.number(),
    updatedAt: v.number(),
    expiresAt: v.number(),
  })
    .index("by_session", ["sessionId"])
    .index("by_expires", ["expiresAt"]),
});

export default schema;