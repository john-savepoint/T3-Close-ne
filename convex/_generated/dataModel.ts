// This file is generated by Convex and will be replaced
// For development purposes, we'll create a minimal implementation

export type Id<T extends string> = string & { __tableName: T }

export interface DataModel {
  attachments: {
    _id: Id<"attachments">
    storageId: Id<"_storage">
    filename: string
    originalFilename: string
    contentType: string
    size: number
    category: string
    uploadedBy: Id<"users">
    uploadedAt: number
    lastAccessedAt?: number
    chatId?: Id<"chats">
    messageId?: Id<"messages">
    description?: string
    tags?: string[]
    extractedText?: string
    isPublic: boolean
    shareToken?: string
    status: "uploading" | "processing" | "ready" | "error"
    processingError?: string
    _creationTime: number
  }

  users: {
    _id: Id<"users">
    email: string
    name: string
    image?: string
    clerkId: string
    createdAt: number
    lastActiveAt: number
    plan: "free" | "pro"
    storageUsed: number
    storageLimit: number
    _creationTime: number
  }

  chats: {
    _id: Id<"chats">
    title: string
    userId: Id<"users">
    createdAt: number
    updatedAt: number
    isArchived: boolean
    isPublic: boolean
    model: string
    systemPrompt?: string
    _creationTime: number
  }

  messages: {
    _id: Id<"messages">
    chatId: Id<"chats">
    content: string
    role: "user" | "assistant"
    userId?: Id<"users">
    timestamp: number
    attachments?: Id<"attachments">[]
    metadata?: {
      model?: string
      tokens?: number
      cost?: number
    }
    _creationTime: number
  }

  _storage: {
    _id: Id<"_storage">
    _creationTime: number
  }
}
